// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LocationTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Location", SourceFile="Features\\Location.feature", SourceLine=0)]
    public partial class LocationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Location.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Location", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Username",
                        "Password",
                        "Birth",
                        "LicenseNumber",
                        "License"});
            table1.AddRow(new string[] {
                        "clement",
                        "12345",
                        "02/05/1994",
                        "49561",
                        "05/06/2016"});
            table1.AddRow(new string[] {
                        "edgar",
                        "48263",
                        "04/06/2005",
                        "0",
                        "01/01/2000"});
            table1.AddRow(new string[] {
                        "paul",
                        "19547",
                        "12/02/1998",
                        "0",
                        "01/01/2000"});
#line 4
 testRunner.Given("following existing clients", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration",
                        "Mark",
                        "Model",
                        "Color",
                        "ReservationPrice",
                        "KilometerRate",
                        "Horsepower"});
            table2.AddRow(new string[] {
                        "FM542AQ",
                        "TOYOTA",
                        "YARIS III",
                        "bleu",
                        "200",
                        "0.50",
                        "8"});
            table2.AddRow(new string[] {
                        "EF248PA",
                        "FORD",
                        "KA +",
                        "gris",
                        "150",
                        "0.75",
                        "8"});
            table2.AddRow(new string[] {
                        "AE167TM",
                        "PEUGEOT",
                        "2008",
                        "gris clair metal",
                        "300",
                        "1.10",
                        "13"});
            table2.AddRow(new string[] {
                        "IJ425QD",
                        "MINI",
                        "MINI III",
                        "bleu",
                        "500",
                        "1.25",
                        "16"});
#line 10
 testRunner.Given("following cars", ((string)(null)), table2, "Given ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Client connection - Username not recognized", SourceLine=16)]
        public virtual void ClientConnection_UsernameNotRecognized()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Client connection - Username not recognized", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 18
 testRunner.Given("my username is \"clem\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.And("my password is \"12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.When("I try to connect to my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("the connection is refused", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.And("the error message is \"Username not recognized\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Client connection - Username recognized", SourceLine=23)]
        public virtual void ClientConnection_UsernameRecognized()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Client connection - Username recognized", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 25
 testRunner.Given("my username is \"clement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.And("my password is \"12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.When("I try to connect to my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("the connection is established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Client connection - Username recognized but incorrect password", SourceLine=29)]
        public virtual void ClientConnection_UsernameRecognizedButIncorrectPassword()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Client connection - Username recognized but incorrect password", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 31
 testRunner.Given("my username is \"clement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.And("my password is \"54321\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.When("I try to connect to my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("the connection is refused", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And("the error message is \"Incorrect password\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Client reservation - Reservation between a client and a vehicle", SourceLine=36)]
        public virtual void ClientReservation_ReservationBetweenAClientAndAVehicle()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Client reservation - Reservation between a client and a vehicle", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 38
 testRunner.Given("my username is \"clement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.And("my password is \"12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.When("I try to connect to my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.Then("the connection is established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table3.AddRow(new string[] {
                            "04/05/2021",
                            "07/05/2021"});
#line 42
 testRunner.Given("following location dates", ((string)(null)), table3, "Given ");
#line hidden
#line 45
 testRunner.When("set location dates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Registration",
                            "Mark",
                            "Model",
                            "Color",
                            "ReservationPrice",
                            "KilometerRate",
                            "Horsepower"});
                table4.AddRow(new string[] {
                            "FM542AQ",
                            "TOYOTA",
                            "YARIS III",
                            "bleu",
                            "200",
                            "0.50",
                            "8"});
                table4.AddRow(new string[] {
                            "EF248PA",
                            "FORD",
                            "KA +",
                            "gris",
                            "150",
                            "0.75",
                            "8"});
                table4.AddRow(new string[] {
                            "AE167TM",
                            "PEUGEOT",
                            "2008",
                            "gris clair metal",
                            "300",
                            "1.10",
                            "13"});
                table4.AddRow(new string[] {
                            "IJ425QD",
                            "MINI",
                            "MINI III",
                            "bleu",
                            "500",
                            "1.25",
                            "16"});
#line 46
 testRunner.Then("the vehicules list should be", ((string)(null)), table4, "Then ");
#line hidden
#line 52
 testRunner.Given("the vehicule is \"AE167TM\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
 testRunner.And("estimate km to \"150\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.When("set location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Username",
                            "Registration",
                            "StartDate",
                            "EndDate",
                            "EstimateKm",
                            "Price"});
                table5.AddRow(new string[] {
                            "clement",
                            "AE167TM",
                            "04/05/2021",
                            "07/05/2021",
                            "150",
                            "630"});
#line 55
 testRunner.Then("the location should be", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Client reservation - Reservation between a client and a vehicle - 18", SourceLine=58)]
        public virtual void ClientReservation_ReservationBetweenAClientAndAVehicle_18()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Client reservation - Reservation between a client and a vehicle - 18", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 60
 testRunner.Given("my username is \"edgar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
 testRunner.And("my password is \"48263\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.When("I try to connect to my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then("the connection is established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table6.AddRow(new string[] {
                            "04/05/2021",
                            "07/05/2021"});
#line 64
 testRunner.Given("following location dates", ((string)(null)), table6, "Given ");
#line hidden
#line 67
 testRunner.When("set location dates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Registration",
                            "Mark",
                            "Model",
                            "Color",
                            "ReservationPrice",
                            "KilometerRate",
                            "Horsepower"});
                table7.AddRow(new string[] {
                            "FM542AQ",
                            "TOYOTA",
                            "YARIS III",
                            "bleu",
                            "200",
                            "0.50",
                            "8"});
                table7.AddRow(new string[] {
                            "EF248PA",
                            "FORD",
                            "KA +",
                            "gris",
                            "150",
                            "0.75",
                            "8"});
#line 68
 testRunner.Then("the vehicules list should be", ((string)(null)), table7, "Then ");
#line hidden
#line 72
 testRunner.Given("the vehicule is \"FM542AQ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
 testRunner.When("set location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then("the error message is \"-18\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Client reservation - Reservation between a client and a vehicle - No License", SourceLine=75)]
        public virtual void ClientReservation_ReservationBetweenAClientAndAVehicle_NoLicense()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Client reservation - Reservation between a client and a vehicle - No License", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 77
 testRunner.Given("my username is \"paul\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
 testRunner.And("my password is \"19547\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.When("I try to connect to my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("the connection is established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table8.AddRow(new string[] {
                            "04/05/2021",
                            "07/05/2021"});
#line 81
 testRunner.Given("following location dates", ((string)(null)), table8, "Given ");
#line hidden
#line 84
 testRunner.When("set location dates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Registration",
                            "Mark",
                            "Model",
                            "Color",
                            "ReservationPrice",
                            "KilometerRate",
                            "Horsepower"});
                table9.AddRow(new string[] {
                            "FM542AQ",
                            "TOYOTA",
                            "YARIS III",
                            "bleu",
                            "200",
                            "0.50",
                            "8"});
                table9.AddRow(new string[] {
                            "EF248PA",
                            "FORD",
                            "KA +",
                            "gris",
                            "150",
                            "0.75",
                            "8"});
                table9.AddRow(new string[] {
                            "AE167TM",
                            "PEUGEOT",
                            "2008",
                            "gris clair metal",
                            "300",
                            "1.10",
                            "13"});
#line 85
 testRunner.Then("the vehicules list should be", ((string)(null)), table9, "Then ");
#line hidden
#line 90
 testRunner.Given("the vehicule is \"FM542AQ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
 testRunner.When("set location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
 testRunner.Then("the error message is \"Invalid license\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Client reservation - Reservation between a client and a vehicle - Too location", SourceLine=93)]
        public virtual void ClientReservation_ReservationBetweenAClientAndAVehicle_TooLocation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Client reservation - Reservation between a client and a vehicle - Too location", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 95
 testRunner.Given("my username is \"clement\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
 testRunner.And("my password is \"12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.When("I try to connect to my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.Then("the connection is established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table10.AddRow(new string[] {
                            "04/05/2021",
                            "07/05/2021"});
#line 99
 testRunner.Given("following location dates", ((string)(null)), table10, "Given ");
#line hidden
#line 102
 testRunner.When("set location dates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Registration",
                            "Mark",
                            "Model",
                            "Color",
                            "ReservationPrice",
                            "KilometerRate",
                            "Horsepower"});
                table11.AddRow(new string[] {
                            "FM542AQ",
                            "TOYOTA",
                            "YARIS III",
                            "bleu",
                            "200",
                            "0.50",
                            "8"});
                table11.AddRow(new string[] {
                            "EF248PA",
                            "FORD",
                            "KA +",
                            "gris",
                            "150",
                            "0.75",
                            "8"});
                table11.AddRow(new string[] {
                            "AE167TM",
                            "PEUGEOT",
                            "2008",
                            "gris clair metal",
                            "300",
                            "1.10",
                            "13"});
                table11.AddRow(new string[] {
                            "IJ425QD",
                            "MINI",
                            "MINI III",
                            "bleu",
                            "500",
                            "1.25",
                            "16"});
#line 103
 testRunner.Then("the vehicules list should be", ((string)(null)), table11, "Then ");
#line hidden
#line 109
 testRunner.Given("the vehicule is \"AE167TM\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
 testRunner.And("estimate km to \"150\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.When("set location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Username",
                            "Registration",
                            "StartDate",
                            "EndDate",
                            "EstimateKm",
                            "Price"});
                table12.AddRow(new string[] {
                            "clement",
                            "AE167TM",
                            "04/05/2021",
                            "07/05/2021",
                            "150",
                            "630"});
#line 112
 testRunner.Then("the location should be", ((string)(null)), table12, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartDate",
                            "EndDate"});
                table13.AddRow(new string[] {
                            "04/05/2021",
                            "07/05/2021"});
#line 115
 testRunner.Given("following location dates", ((string)(null)), table13, "Given ");
#line hidden
#line 118
 testRunner.When("set location dates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Registration",
                            "Mark",
                            "Model",
                            "Color",
                            "ReservationPrice",
                            "KilometerRate",
                            "Horsepower"});
                table14.AddRow(new string[] {
                            "FM542AQ",
                            "TOYOTA",
                            "YARIS III",
                            "bleu",
                            "200",
                            "0.50",
                            "8"});
                table14.AddRow(new string[] {
                            "EF248PA",
                            "FORD",
                            "KA +",
                            "gris",
                            "150",
                            "0.75",
                            "8"});
                table14.AddRow(new string[] {
                            "AE167TM",
                            "PEUGEOT",
                            "2008",
                            "gris clair metal",
                            "300",
                            "1.10",
                            "13"});
                table14.AddRow(new string[] {
                            "IJ425QD",
                            "MINI",
                            "MINI III",
                            "bleu",
                            "500",
                            "1.25",
                            "16"});
#line 119
 testRunner.Then("the vehicules list should be", ((string)(null)), table14, "Then ");
#line hidden
#line 125
 testRunner.Given("the vehicule is \"FM542AQ\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
 testRunner.And("estimate km to \"300\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.When("set location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
 testRunner.Then("the error message is \"Too location \'AE167TM\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
